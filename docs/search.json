[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rain Hartos",
    "section": "",
    "text": "Education\nBA in Computer Science\nStatistics and Data Science concentration\n2025 | St. Olaf College\n\n\nExperience\nSTATISTICS TUTOR\nAugust 2023 - Present | St. Olaf Academic Success Center\nCOMPUTER SCIENCE LEAD TA\nJanuary 2023 - Present | St. Olaf MSCS Department\nCOMPUTER SCIENCE TA\nSeptember 2023 - Present | St. Olaf MSCS Department"
  },
  {
    "objectID": "projectlinks.html",
    "href": "projectlinks.html",
    "title": "Past Projects",
    "section": "",
    "text": "Stardew Valley Item Profit Visualizer - December, 2024\nA interactive webpage that takes data scrapped from the Stardew Valley Wiki page to display trends across in-game items. Website was built using Shiny dashboards, and code to gather data and produce graphs was done in R.\n\n\nWomen In Headlines - November, 2024\nAn exploratory text analysis on the trends of how women are portrayed in article headlines. Conducted sentiment analysis and highlighted categories and themes based on TF-IDF scores in R.\n\n\nScarlet’s Shadow – May, 2024\nA 2.5D video game created with fellow students Yuina Iseki, Dasol Lee, and Patrick Garcia at DIS Copenhagen, Denmark. Took on the role of creating and designing all of the UI and coding the foundations of the game in C#.\n\n\nThe Slime Alchemist - February, 2024\nDesigned all UI elements and took on the primary role of developing the backend using C# to create an educational platformer game for kids in Unity.\n\n\nAnalyzing Security Breaches in the US - Dec, 2023\nDone as a project for Stats 2 in collaboration with Maheen Asim, used multi-linear regression to predict the number of individuals affected by security breaches based on type, location, year, and region of the breach.\n\n\nBIOS-4 - March, 2023\nDesigned and developed all front-end code using HTML and Python to visualize environmental impacts on simulated biomes. Project was done with a team of 3 other members for the Oles Hack 2023 hackathon."
  },
  {
    "objectID": "MiniProject1_files_copy/MiniProject1.html",
    "href": "MiniProject1_files_copy/MiniProject1.html",
    "title": "Mini Project 1: Maps",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(mdsr)  \nlibrary(maps)\nlibrary(cspp)\nlibrary(htmltools)\nlibrary(glue)\nlibrary(maps)\nlibrary(leaflet)\n\n\nGithub source code Link\n\nOverview\nThis mini projects aims to illustrate gun control trends in 48 states from the US in the year 2010.\nThe variables we are interested in for this this project are state, arms_pro, and w_guncontrol_registration_requir. state is our explanatory variable and arms_pro, and w_guncontrol_registration_requir are our response variables. These variables are from the cspp R package, which is a compilation of more than 900 variables across 50 states from 1900-2016, which was compiled by the The Correlates of State Policy Project.\nThe explanatory variable, state, is a categorical variable with each level being a state from one of the US states (excluding Alaska and Hawaii.)\nThe first response variable, arms_pro, is a numerical variable that gives the percentage of Pro-arms public opinion by state. Pro-arms is favoring the right to own guns and opposing legislation restricting this right.\nThe second response variable, w_guncontrol_registration_requir, categorizes if a state has registration requirement for guns. There are 3 levels, 0 = no; 1 = law applies to handguns only; 2 = law applies to all firearms, including rifles and shotguns.\n\n\nDataset Searching\n\n\nCode\n# Find variables based on a category\ndemo_variables &lt;- get_var_info(categories = \"gun control\")\n\n# Use these variables to get a full or subsetted version of the data\ncspp_data &lt;- get_cspp_data(vars = demo_variables$variable, \n                           years = seq(2000, 2012)) |&gt;\n  select(state, year, w_guncontrol_registration_requir, arms_pro)\n\n\n\n\nPreparing the Dataset\n\n\nCode\n# Get info to draw US states for geom_polygon (connect the lat-long points)\nstates_polygon &lt;- as_tibble(map_data(\"state\")) |&gt;\n  select(region, group, order, lat, long)\n\n# Get info to draw US states for geom_sf and leaflet (simple features object \n#   with multipolygon geometry column)\nstates_sf &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\") |&gt;\n  select(name, geometry)\n\n#Use the cspp package for the other dataset\ndemo_variables &lt;- get_var_info(categories = \"gun control\")\ncspp_data &lt;- get_cspp_data(vars = demo_variables$variable, \n                           years = seq(2000, 2012)) |&gt;\n  select(state, year, w_guncontrol_registration_requir, arms_pro)|&gt;\n  filter(year == 2010) |&gt;\n  mutate(w_guncontrol_registration_requir = as.factor(w_guncontrol_registration_requir),\n         across(arms_pro, round, 3))\n\n#unique(cspp_data$state)\n\n\n\n\nCode\n#Prepare data for merge\nstates_polygon &lt;- states_polygon |&gt;\n  mutate(region = str_replace_all(region, \" \", \"\"))\n\nstates_sf &lt;- states_sf |&gt;\n  mutate(name = str_to_lower(name),\n         name = str_replace_all(name, \" \", \"\"))\n\ncspp_data &lt;- cspp_data |&gt;\n  mutate(state = str_to_lower(str_replace_all(state, \" \", \"\")))\n\n\n\n\nCode\n#Merge the dataset\n\n# Merge with states_polygon (static)\ncspp_polygon &lt;- states_polygon |&gt;\n  left_join(cspp_data, by = c(\"region\" = \"state\"))\n\n# Merge with states_sf (static or interactive)\ncspp_sf &lt;- states_sf |&gt;\n  left_join(cspp_data, by = c(\"name\" = \"state\")) |&gt;\n  filter(!(name %in% c(\"alaska\", \"hawaii\"))) \n\n\n\n\nNumeric variable (static plot):\n\n\nCode\nlibrary(viridis)\ncspp_polygon |&gt;\n  ggplot(mapping = aes(x = long, y = lat, group = group)) + \n    geom_polygon(aes(fill = arms_pro), color = \"black\")+ \n    labs(title = \"Pro-Arms Percentage by State in 2010\",\n         fill = \"Pro-Arms Percentage\",\n         caption = \"Data Source: https://ippsr.msu.edu/public-policy/correlates-state-policy\") +\n    coord_map() + \n    theme_void() +  \n    scale_fill_viridis(option = \"C\", direction = -1) \n\n\n\n\n\n\n\n\n\nThe choropleth map represents the percentage of pro-arms public opinion in 2010 across U.S. states. States are colored based on the percentage of residents supporting gun ownership rights. The explanatory variable isstate, with each U.S. state (except Alaska and Hawaii) as a category. The response variable, arms_pro, is a percentage representing the pro-arms public opinion for each state. arms_pro ranges from around 25% to 35%, which are depicted using a color gradient. Darker colors represent higher percentages while lighter colors represent lower percentages. From the choropleth map, it can be seen that New York and California have the lowest percentages (lightest color) while South Dakota and Wyoming have the highest percentages (darkest color) or pro-arms public support.\n\n\nNumeric variable (interactive plot):\n\n\nCode\ncspp_sf &lt;- cspp_sf |&gt;\n  mutate(labels = str_c(name, \": \", arms_pro, \" Percent Pro Arms in 2010\")) #Create labels\n\nlabels &lt;- lapply(cspp_sf$labels, HTML)\n\n#create the leaflet map\nleaflet(cspp_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt; #set the intitial view of the map\n  addTiles() |&gt;\n  addPolygons( #create the polygons that represent each of the states using the cspp_sf dataset\n    weight = 2,\n    opacity = 1,\n    color = ~ colorNumeric(\"YlOrRd\", cspp_sf$arms_pro)(cspp_sf$arms_pro), #have the color correspond with the arms_pro percentages \n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions( #Changes the styling of the highlighted states\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels, \n    labelOptions = labelOptions( #changes the styling of the text and labels\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) \n\n\n\n\n\n\n\n\nCategorical variable (static plot):\n\n\nCode\n#table(cspp_polygon$w_guncontrol_registration_requir)\n\ncspp_polygon |&gt;\n  mutate(w_guncontrol_registration_requir = recode(w_guncontrol_registration_requir,\n    `0` = \"None\",       \n    `1` = \"Handguns Only\",   \n    `2` = \"All Firearms\")) |&gt;\n  ggplot(mapping = aes(x = long, y = lat, group = group)) + \n    geom_polygon(aes(fill = w_guncontrol_registration_requir), color = \"black\") + \n    labs(title = \"State Gun Registration Laws in 2010\",\n         fill = \"Gun Registration Required\",\n         caption = \"Data Source: https://ippsr.msu.edu/public-policy/correlates-state-policy\") +\n    coord_map() + \n    theme_void() +  \n    scale_fill_manual(values = c(\"red\", \"yellow\", \"green\")) \n\n\n\n\n\n\n\n\n\nThe choropleth map represents U.S. state gun registration laws in 2010, with each state colored based on the level of gun registration required. The explanatory variable is state, with each U.S. state (except Alaska and Hawaii) as a category. The response variable is w_guncontrol_registration_requir, which represents the level of gun registration required in each state. There are three levels: no registration required (“None”, colored in red), registration required for handguns only (“Handguns Only”, colored in yellow), and registration required for all firearms, including rifles and shotguns (“All Firearms”, colored in green). From the map, we can see that a majority of states are colored in red, meaning that they require no gun registration. There are a few that are colored green, which includes California, Connecticut, and Massachusetts, meaning all firearms require registration. Seven states are coded yellow, such as Alabama and New York, meaning that only handguns are required for registration in those states.\n\n\nCategorical variable (interactive plot):\n\n\nCode\ncspp_sf &lt;- cspp_sf |&gt; #Recode the levels and set labels\n  mutate(w_guncontrol_registration_requir = recode(w_guncontrol_registration_requir,\n    `0` = \"No\",       \n    `1` = \"Handguns Only\",   \n    `2` = \"All Firearms\"),\n    labels = str_c(name,\n                   \": \",\n                   w_guncontrol_registration_requir,\n                   \" Required Gun Registration\")) |&gt;\n  filter(!is.na(w_guncontrol_registration_requir)) #Remove NA from the legend\n\nlabels &lt;- lapply(cspp_sf$labels, HTML)\n\nfactpal &lt;- colorFactor(c(  \"green\",\"yellow\", \"red\"), #match the colors from static plot\n                       levels(cspp_sf$w_guncontrol_registration_requir))\n\n#create the leaflet map\nleaflet(cspp_sf) |&gt;\n  setView(-96, 37.8, 4) |&gt; #set the intitial view of the map\n  addTiles() |&gt;\n  addPolygons( #create the polygons that represent each of the states using the cspp_sf dataset\n    weight = 2,\n    opacity = 1,\n    color = \"black\",\n    fillColor = ~ factpal(cspp_sf$w_guncontrol_registration_requir),\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(  #Changes the styling of the highlighted states\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions( #changes the styling of the text and labels\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = factpal, values = ~cspp_sf$w_guncontrol_registration_requir, \n            opacity = 0.7, title = NULL, position = \"bottomright\")"
  },
  {
    "objectID": "MiniProject2Copy/MiniProject2Submission.html",
    "href": "MiniProject2Copy/MiniProject2Submission.html",
    "title": "Mini Project 1: Data Aquisition",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(polite)\nlibrary(sf)\nlibrary(maps)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(janitor)\nlibrary(httr2)\nlibrary(httr)\nlibrary(lubridate)\nlibrary(tidycensus)\nlibrary(purrr)"
  },
  {
    "objectID": "MiniProject2Copy/MiniProject2Submission.html#introduction",
    "href": "MiniProject2Copy/MiniProject2Submission.html#introduction",
    "title": "Mini Project 1: Data Aquisition",
    "section": "Introduction",
    "text": "Introduction\nFor our project, we decided to scrape data from the wiki pages of one of our favorite video games, Stardew Valley. Stardew Valley is a popular indie farming game that allows players to take on the role of a character who inherits a run-down farm from their grandfather. In the game, players can grow crops, raise animals, fish, mine, and engage in social activities with the towns people.\nFor our project, we were interested in compiling a list of items from the game that can be farmed or collected. The only way to make money from the game is by selling these items, and the price of the item depends on the quality of the item and the profession(s) of the player. Thus, our dataset includes information on the name, category, subcategory, and the different price points of the item depending on item quality (regular, silver, gold, and iridium) and player’s profession."
  },
  {
    "objectID": "MiniProject2Copy/MiniProject2Submission.html#approach",
    "href": "MiniProject2Copy/MiniProject2Submission.html#approach",
    "title": "Mini Project 1: Data Aquisition",
    "section": "Approach",
    "text": "Approach\nAll of our data has been accumulated from the Stardew Valley Wiki page. Since each item in the game has a different page and not all of the pages followed a similar structure, we used a combination of harvesting the data in both table form and anywhere on the webpage using rvest with html_text. In the end, we were able to create a dataset from the more important item categories: crops, fish, animal products, and minerals.\n\nCrops\nCrops was the most difficult item to scrape from the wiki, since not all of the pages are structured the same. However, we tried our best to automate where we could.\nWe start be getting a list of all the different crops in the game.\n\n\nCode\n#check that we are allowed to scrape the wiki\nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\")\n\n\n[1] TRUE\n\n\nCode\nsession &lt;- bow(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\", force = TRUE)\n\n\n\n\nCode\ncrops &lt;- bow(\"https://stardewvalleywiki.com/Crops\", force = TRUE)\n\nresult &lt;- scrape(crops) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\nseasonal_crops &lt;- result[[134]][2] #table of the season crops so we can use that list\n\nseasonal_crops &lt;- seasonal_crops |&gt;\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |&gt;\n  unnest(Crops) |&gt;\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\")) |&gt;\n  distinct(Crops)\n\n\nCreate our helper functions for crops:\n\n\nCode\n# function for getting the price at a given page and css selector\nget_price &lt;- function(page, css_selector) {\n  page |&gt;\n  html_nodes(css_selector) |&gt;\n  html_text()\n}\n\n# function for creating a tibble of base prices, no profession, for a given crop page\ncrop_base_prices &lt;- function(crop, tiller = FALSE) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector &lt;- str_c(\"tr:nth-child(10) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else {\n      selector &lt;- str_c(\"tr:nth-child(10) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\n\nCreate the tibbles for seasonal crops using the helper functions. Note that items 46 (Tea_Leaves), 44(Sweet Gem Berry), 43(Qi_Fruit), 41(Cactus_Fruit), 36(Grape), 4(Coffee_Bean) have issues when using the functions, so we will scrape the data manually without the functions.\n\n\nCode\n# list of all our seasonal crops\nseasonal_crops_list &lt;- pull(seasonal_crops) # list of our crops tibble\n\n# List of crops, excluding those with known issues\nvalid_crops_list &lt;- seasonal_crops_list[-c(46, 44, 43, 41, 36, 4)]\n\n# Base prices without profession\nbase_crop_prices &lt;- valid_crops_list |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_crop_prices &lt;- valid_crops_list |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |&gt;\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller crop prices\nseasonal_crop_prices &lt;- bind_rows(base_crop_prices, tiller_crop_prices)\nseasonal_crop_prices\n\n\n# A tibble: 80 × 6\n   item        regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Blue_Jazz              50           62         75           100 &lt;NA&gt;      \n 2 Carrot                 35           43         52            70 &lt;NA&gt;      \n 3 Cauliflower           175          218        262           350 &lt;NA&gt;      \n 4 Garlic                 60           75         90           120 &lt;NA&gt;      \n 5 Green_Bean             40           50         60            80 &lt;NA&gt;      \n 6 Kale                  110          137        165           220 &lt;NA&gt;      \n 7 Parsnip                35           43         52            70 &lt;NA&gt;      \n 8 Potato                 80          100        120           160 &lt;NA&gt;      \n 9 Rhubarb               220          275        330           440 &lt;NA&gt;      \n10 Strawberry            120          150        180           240 &lt;NA&gt;      \n# ℹ 70 more rows\n\n\nDo the same for non seasonal crops:\n\n\nCode\n# Non-seasonal crops list, excluding problematic items\nother_crops &lt;- c(\"Apple\", \"Blackberry\", \"Pomegranate\", \"Wild_Plum\", \"Apricot\", \n                 \"Cherry\", \"Spice_Berry\", \"Peach\", \"Orange\", \"Crystal_Fruit\", \n                 \"Banana\", \"Mango\", \"Fiddlehead_Fern\")[-c(10, 7, 4, 2)]\n\n# Base prices without profession\nbase_other_crops &lt;- other_crops |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_other_crops &lt;- other_crops |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |&gt;\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller prices into one table and arrange by item\nnonseasonal_crop_tbl &lt;- bind_rows(base_other_crops, tiller_other_crops) |&gt;\n  arrange(item)\n\n\nFinally, create a function for the weird crops that have missing quality or selector path was different\n\n\nCode\n#function for the crops that do not have different qualities\ncrop_weird_prices &lt;- function(item, selector){\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", item)\n  page &lt;- read_html(url)\n  regular_price &lt;- get_price(page, selector)\n  \n  tibble(item = item,\n      regular_price = parse_number(regular_price))\n}\n\n#function for the crops that have different qualities. the Berry is for the fruits that have a weird selector that seems to follow a similar pattern.\ncrop_weird_prices_w_quality &lt;- function(crop, tiller = FALSE, berry = FALSE ){\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector &lt;- str_c(\"tr:nth-child(11) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else if (berry){\n      selector &lt;- str_c(\"tr:nth-child(9) tr:nth-child(\", i, \") td+ td\")\n    }else {\n      selector &lt;- str_c(\"tr:nth-child(11) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\n\nNow we make all of the tibbles for the weird crops.\n\n\nCode\n# Tea Leaves\nbase_tea_leaves &lt;- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) tr td:nth-child(1) td+ td\")\ntiller_tea_leaves &lt;- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) td+ td td+ td\")\n\ntea_leaves &lt;-bind_rows(base_tea_leaves, tiller_tea_leaves)\n\n# Qi_Fruit\nbase_qi_fruit &lt;-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) tr td:nth-child(1) td+ td\")\ntiller_qi_fruit &lt;-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) td+ td td+ td\")\n\nqi_fruit &lt;-bind_rows(base_qi_fruit, tiller_qi_fruit)\n\n# Cactus fruit\ncactus_fruit &lt;- crop_weird_prices_w_quality(\"Cactus_Fruit\")\ncactus_fruit_tiller &lt;- crop_weird_prices_w_quality(\"Cactus_Fruit\", tiller = TRUE)\n\ncactus_fruit &lt;-bind_rows(cactus_fruit, cactus_fruit_tiller)\n\n# Grape\ngrape &lt;- crop_weird_prices_w_quality(\"Grape\")\ngrape_tiller &lt;- crop_weird_prices_w_quality(\"Grape\", tiller = TRUE)\n\ngrape &lt;-bind_rows(grape, grape_tiller)\n\n# Coffee_bean\ncoffee_bean &lt;- crop_weird_prices_w_quality(\"Coffee_Bean\")\n\n# Wild_plum\nwild_plum &lt;- crop_weird_prices_w_quality(\"Wild_Plum\", berry = TRUE)\n\n# Spice_berry\nspice_berry &lt;- crop_weird_prices_w_quality(\"Spice_Berry\", berry = TRUE)\n\n# Crystal_Fruit\ncrystal_fruit &lt;- crop_weird_prices_w_quality(\"Crystal_Fruit\", berry = TRUE)\n\n# Finally, blackberry is just weird and likes to be different, so we did not use a function for it. \n#Blackberry\n\n# Base\nurl &lt;- str_c(\"https://stardewvalleywiki.com/\", \"Blackberry\")\npage &lt;- read_html(url)\n\nqualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\nprices &lt;- list()\n\n# Loop to retrieve and parse prices\nfor (i in seq_along(qualities)) {\n  price &lt;- get_price(page, str_c(\"tr:nth-child(9) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\"))\n  prices[[qualities[i]]] &lt;- parse_number(price)\n}\n\nblackberry &lt;- tibble(\n  item = \"Blackberry\",\n  regular_price = prices$regular,\n  silver_price = prices$silver,\n  gold_price = prices$gold,\n  iridium_price = prices$iridium\n)\n\n\nNow, we can combine all of the crop tibbles into one:\n\n\nCode\n# First chunks of crops \ndraft_crops &lt;- bind_rows(seasonal_crop_prices,\n                         nonseasonal_crop_tbl,\n                         tea_leaves, \n                         qi_fruit, \n                         cactus_fruit, \n                         grape, \n                         coffee_bean, \n                         wild_plum, \n                         blackberry, \n                         spice_berry, \n                         crystal_fruit) |&gt;\n  arrange(item)\n\n\nLastly, we can add in the category variable and the subcategory variable. to makes things easier, we decided the subcategory would be the crop’s season. Then, we write it to a csv in case the website changes or updates.\n\n\nCode\nseasons &lt;- result[[134]] %&gt;%\n  select(Season = 1, Crops = 2) |&gt;\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |&gt;\n  unnest(Crops) |&gt;\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\"))\n\n\n\n\nCode\ncrop_prices &lt;- draft_crops |&gt;\n  left_join(seasons, join_by(item == Crops))|&gt;\n   mutate(category = \"crop\",\n          sub_category = str_c(Season, \" Crop\"))|&gt;\n  select(-Season)\n\nwrite.csv(crop_prices, \"crop_prices.csv\")\n\nhead(crop_prices, n = 10)\n\n\n# A tibble: 10 × 8\n   item  regular_price silver_price gold_price iridium_price profession category\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 Amar…           150          187        225           300 &lt;NA&gt;       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 &lt;NA&gt;       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 &lt;NA&gt;       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 &lt;NA&gt;       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 &lt;NA&gt;       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 1 more variable: sub_category &lt;chr&gt;\n\n\n\n\nFish\nFish was the second most difficult item to scrape from the wiki, since again not all of the pages are structured the same. However, we were able identify 4 different pages in which we could write functions to automate.\nWe start be getting a list of all the different fish in the game.\n\n\nCode\n# Making sure that this irl is scrapable\nfish &lt;- bow(\"https://stardewvalleywiki.com/Fish\", force = TRUE) \n\n# Scraping table to get a list of all the fish \nresult &lt;- scrape(fish) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\n# The correct table for the list of fish, and only keeping the names of the fish column\nfishes &lt;- result[[225]][2] \n\n# However, it is formatted very poorly so we need to tidy it up \nfishes &lt;- fishes |&gt;\n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |&gt;\n  unnest(Fish) |&gt;\n  # splitting the string since \" • \" was used to separate all fish\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\")) |&gt; \n  distinct(Fish) |&gt;\n  # this is a fish that is in the data set twice but with different spacing \n  filter(Fish != \"_Super_Cucumber\") \n\n# This is a tibble with the subcategories of the fish and the fish name for joining later\nsubcategory &lt;- result[[225]] |&gt; \n  select(Location = 1, Fish = 2) |&gt; \n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |&gt; \n  unnest(Fish) |&gt;\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\"))\n\n\nCreate our helper functions for fish:\n\n\nCode\n# function for getting the price at a given page and css selector\nget_price &lt;- function(page, css_selector) {\n  page |&gt;\n  html_nodes(css_selector) |&gt;\n  html_text()\n}\n\n# function for creating a tibble of prices for a given fish\n\n# this functions output a tibble of our fish \n# and the 4 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices &lt;- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\n\nAs well as the function for the fish with a different webpage format.\n\n\nCode\n# this functions output a tibble of our fish, \n# and the 2 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices2 &lt;- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n  )\n}\n\n\nNow, we will load in our fishes lists so for the type of webpage format they have and then apply our function to the fishes to find their prices.\n\n\nCode\nfishes_list &lt;- pull(fishes) # List of our fishes tibble to view, then dividing up the fish by their website format\n\n# Loading in the fish we know that are tr:nth-child(14) in the html (these fishes were found in the Fish QMD when first exploring and getting to know our website)\nfishfor14 &lt;- readRDS(\"fishfor14.RDS\")\nfishfor14\n\n\n [1] \"Mutant_Carp\"      \"Radioactive_Carp\" \"Albacore\"         \"Anchovy\"         \n [5] \"Eel\"              \"Flounder\"         \"Halibut\"          \"Herring\"         \n [9] \"Octopus\"          \"Pufferfish\"       \"Red_Mullet\"       \"Red_Snapper\"     \n[13] \"Sardine\"          \"Sea_Cucumber\"     \"Squid\"            \"Super_Cucumber\"  \n[17] \"Tilapia\"          \"Tuna\"             \"Bream\"            \"Catfish\"         \n[21] \"Chub\"             \"Dorado\"           \"Goby\"             \"Lingcod\"         \n[25] \"Perch\"            \"Pike\"             \"Rainbow_Trout\"    \"Salmon\"          \n[29] \"Shad\"             \"Smallmouth_Bass\"  \"Sunfish\"          \"Tiger_Trout\"     \n[33] \"Walleye\"          \"Bullhead\"         \"Carp\"             \"Largemouth_Bass\" \n[37] \"Midnight_Carp\"    \"Sturgeon\"         \"Woodskip\"         \"Ghostfish\"       \n[41] \"Ice_Pip\"          \"Stonefish\"        \"Sandfish\"         \"Slimejack\"       \n[45] \"Void_Salmon\"      \"Blobfish\"         \"Midnight_Squid\"   \"Spook_Fish\"      \n[49] \"Blue_Discus\"      \"Lionfish\"         \"Stingray\"        \n\n\nCode\n# Loading in the fish we know that are tr:nth-child(15) in the html, same as above\nfishfor15 &lt;- readRDS(\"fishfor15.RDS\")\nfishfor15\n\n\n [1] \"Angler\"             \"Crimsonfish\"        \"Glacierfish\"       \n [4] \"Glacierfish_Jr.\"    \"Legend\"             \"Legend_II\"         \n [7] \"Ms._Angler\"         \"Son_of_Crimsonfish\" \"Lava_Eel\"          \n[10] \"Scorpion_Carp\"     \n\n\nCode\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishfor10 &lt;- readRDS(\"fishfor10.RDS\")\nfishfor10 \n\n\n[1] \"Clam\"   \"Cockle\" \"Mussel\" \"Oyster\"\n\n\nCode\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishleft &lt;- readRDS(\"fishleft.RDS\")\nfishleft\n\n\n[1] \"Crab\"       \"Crayfish\"   \"Lobster\"    \"Periwinkle\" \"Shrimp\"    \n[6] \"Snail\"     \n\n\nCode\n# Creating list of tbl's to store prices so that we can bind into one big tibble\nfish_prices &lt;- vector(\"list\", length = 12)\n\n# Base prices without profession for tr:nth-child(14)\nfish_prices[[1]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 14)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[2]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 14)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[3]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 14)) |&gt;\n  mutate(profession = \"angler\")\n\n\n\n\nCode\n# Base prices without profession for tr:nth-child(15)\nfish_prices[[4]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 15)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[5]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 15)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[6]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 15)) |&gt;\n  mutate(profession = \"angler\")\n\n\n\n\nCode\n# Base prices without profession for tr:nth-child(10)\nfish_prices[[7]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 10)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[8]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[9]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"angler\")\n\n\n\n\nCode\n# Base prices without profession for tr:nth-child(10) but only two qualities\nfish_prices[[10]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, nthchild_num = 10)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[11]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, fisher = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[12]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, angler = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"angler\")\n\n\nFinally we will take our fish prices and then create one big tibble.\n\n\nCode\n# first tbl in fish prices assigned to our final tibble \ntidy_fish_prices &lt;- fish_prices[[1]] \n\n# for loop for iterating each tbl in our fish prices list to our final tibble\nfor (i in 2:12){\n  tidy_fish_prices &lt;- bind_rows(tidy_fish_prices, fish_prices[[i]])\n}\n\n# viewing and alphabetizing our tidy fish tbl \n# also joining our subcategories and assigning category\n(tidy_fish_prices &lt;- tidy_fish_prices |&gt;\n  left_join(subcategory, join_by(item == Fish)) |&gt;\n  mutate(category = \"fish\") |&gt;\n  rename(sub_category = Location) |&gt;\n  arrange(item))\n\n\n# A tibble: 318 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Albacore            75           93        112           150 &lt;NA&gt;      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 &lt;NA&gt;      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 8 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 308 more rows\n# ℹ 2 more variables: sub_category &lt;chr&gt;, category &lt;chr&gt;\n\n\nCode\n# writing our tbl as a csv so that we can join with the other items \nwrite.csv(tidy_fish_prices, \"fish_prices.csv\")\nhead(tidy_fish_prices, n = 10)\n\n\n# A tibble: 10 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Albacore            75           93        112           150 &lt;NA&gt;      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 &lt;NA&gt;      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 8 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 2 more variables: sub_category &lt;chr&gt;, category &lt;chr&gt;\n\n\n\n\nAnimal Products\nAnimal products was one of the easier items to scrape since we were able to scrape the data from a table.\n\n\nCode\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Animal_Products_Profitability\")\n\n\n[1] TRUE\n\n\nCode\nsession &lt;- bow(\"https://stardewvalleywiki.com/Animal_Products_Profitability\", force = TRUE)\n\n#take the second table, because that is the one we are interested in\nresult_animals &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt; \n  html_table(header = TRUE, fill = TRUE)\n\nsd_animal_prices &lt;- result_animals[[2]]\n\n\nFrom here all we have to do is clean up our tibble.\n\n\nCode\n#clean up the sd_animal_prices tibble\ntidy_sd_animal_price &lt;- sd_animal_prices |&gt;\n  clean_names()|&gt;\n  select(item, \n         profession, \n         quality, \n         sell_price)|&gt; #select only the columns we want\n  group_by(item, profession)|&gt;\n  pivot_wider(names_from = quality, \n              values_from = sell_price, \n              names_glue = \"{quality}_price\",\n              values_fn = mean)|&gt;\n  clean_names()|&gt;\n  mutate(category = \"animal product\",\n         profession = ifelse(profession == \"—\", NA, profession))\n\n#write the final version to a csv\nwrite.csv(tidy_sd_animal_price, \"animal_product_prices.csv\")\nhead(tidy_sd_animal_price, n = 10)\n\n\n# A tibble: 10 × 7\n# Groups:   item, profession [10]\n   item  profession regular_price silver_price gold_price iridium_price category\n   &lt;chr&gt; &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;   \n 1 Egg   &lt;NA&gt;                  50           62         75           100 animal …\n 2 Egg   Rancher               60           75         90           120 animal …\n 3 Egg   Artisan               50           62         75           100 animal …\n 4 Larg… &lt;NA&gt;                  95          118        142           190 animal …\n 5 Larg… Rancher              114          142        171           228 animal …\n 6 Larg… Artisan               95          118        142           190 animal …\n 7 Void… &lt;NA&gt;                  65           81         97           130 animal …\n 8 Void… Rancher               78           97        117           156 animal …\n 9 Void… Artisan               65           81         97           130 animal …\n10 Duck… &lt;NA&gt;                  95          118        142           190 animal …\n\n\n\n\nMinerals\nMinerals was one of the easier items to scrape since we were able to scrape the data from a table. However assigning the category and subcategories is what made the process a little more tedious.\n\n\nCode\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Minerals\")\n\n\n[1] TRUE\n\n\nCode\nsession &lt;- bow(\"https://stardewvalleywiki.com/Minerals\", force = TRUE)\n\nresult_minerals &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt; \n  html_table(header = TRUE, fill = TRUE)\n#interested in tables 1-4\n\n\n\n\nCode\n#This function takes a scraped minerals table and preps it for joining with other datasets\ntidy_minerals &lt;- function(data, sub_cat){\n  data|&gt;\n  clean_names()|&gt;\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = sub_cat)|&gt;\n  rename(regular_sell_price = sell_price)|&gt;\n  pivot_longer(\n    cols = c(gemologist_sell_price,\n             regular_sell_price),\n    names_to = \"profession\",\n    values_to = \"sell_price\"\n  )|&gt;\n  select(item, \n         profession, \n         sell_price,\n         category,\n         sub_category)|&gt;\n  mutate(sell_price = as.numeric(str_extract(sell_price, '(?&lt;=data-sort-value=\")\\\\d+')),\n         profession = ifelse(profession == \"gemologist_sell_price\",\n                             \"gemologist\", NA))\n  \n \n}\n\n#use function for the 1-3 tables using a for loop\nminerals_tbl &lt;- vector(\"list\", length = 4)\nmineral_sub_cat &lt;- c(\"foraged mineral\",\n                     \"gem\",\n                     \"geode mineral\",\n                     \"geode\")\nfor (i in 1:3){\n  minerals_tbl[[i]] &lt;- tidy_minerals(result_minerals[[i]], mineral_sub_cat[i])\n  \n}\n\n#clean up the variable names so that it is ready for the row bind.\n# make sure the category is all mineral, and the sub_category is correct\nminerals_tbl[[4]]&lt;- result_minerals[[4]]|&gt;\n  clean_names()|&gt;\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = \"geode\",\n         sell_price = as.numeric(str_extract(sell_price, '(?&lt;=data-sort-value=\")\\\\d+')),\n         profession = NA)|&gt;\n  select(item, sell_price, category, sub_category, profession)\n\ntidy_sd_minerals_price &lt;- bind_rows(minerals_tbl)\n\n\nWrite it to a csv in case the website changes or updates.\n\n\nCode\nwrite.csv(tidy_sd_minerals_price, \"minerals_prices.csv\")\nhead(tidy_sd_minerals_price, n = 10)\n\n\n# A tibble: 10 × 5\n   item          profession sell_price category sub_category   \n   &lt;chr&gt;         &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          \n 1 Quartz        gemologist         32 mineral  foraged mineral\n 2 Quartz        &lt;NA&gt;               25 mineral  foraged mineral\n 3 Earth Crystal gemologist         65 mineral  foraged mineral\n 4 Earth Crystal &lt;NA&gt;               50 mineral  foraged mineral\n 5 Frozen Tear   gemologist         97 mineral  foraged mineral\n 6 Frozen Tear   &lt;NA&gt;               75 mineral  foraged mineral\n 7 Fire Quartz   gemologist        130 mineral  foraged mineral\n 8 Fire Quartz   &lt;NA&gt;              100 mineral  foraged mineral\n 9 Emerald       gemologist        325 mineral  gem            \n10 Emerald       &lt;NA&gt;              250 mineral  gem            \n\n\n\nCombined Dataset\nWe then merge together all of the data sets for each of the 4 categories: crops, fish, animal products, and minerals.\n\n\nCode\n# binding rows for all of different categories \nstardew_items &lt;- bind_rows(crop_prices, \n                           tidy_sd_animal_price, \n                           tidy_sd_minerals_price,\n                           tidy_fish_prices)\n\nwrite.csv(stardew_items, \"stardew_items.csv\")\n\nhead(stardew_items, n = 10)\n\n\n# A tibble: 10 × 9\n   item  regular_price silver_price gold_price iridium_price profession category\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 Amar…           150          187        225           300 &lt;NA&gt;       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 &lt;NA&gt;       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 &lt;NA&gt;       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 &lt;NA&gt;       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 &lt;NA&gt;       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 2 more variables: sub_category &lt;chr&gt;, sell_price &lt;dbl&gt;"
  },
  {
    "objectID": "MiniProject2/MiniProject2Submission.html",
    "href": "MiniProject2/MiniProject2Submission.html",
    "title": "Mini Project 2: Data Aquisition",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(polite)\nlibrary(sf)\nlibrary(maps)\nlibrary(viridis)\nlibrary(leaflet)\nlibrary(htmltools)\nlibrary(janitor)\nlibrary(httr2)\nlibrary(httr)\nlibrary(lubridate)\nlibrary(tidycensus)\nlibrary(purrr)\nGithub Source code Link"
  },
  {
    "objectID": "MiniProject2/MiniProject2Submission.html#introduction",
    "href": "MiniProject2/MiniProject2Submission.html#introduction",
    "title": "Mini Project 2: Data Aquisition",
    "section": "Introduction",
    "text": "Introduction\nFor our project, we decided to scrape data from the wiki pages of one of our favorite video games, Stardew Valley. Stardew Valley is a popular indie farming game that allows players to take on the role of a character who inherits a run-down farm from their grandfather. In the game, players can grow crops, raise animals, fish, mine, and engage in social activities with the towns people.\nFor our project, we were interested in compiling a list of items from the game that can be farmed or collected. The only way to make money from the game is by selling these items, and the price of the item depends on the quality of the item and the profession(s) of the player. Thus, our dataset includes information on the name, category, subcategory, and the different price points of the item depending on item quality (regular, silver, gold, and iridium) and player’s profession."
  },
  {
    "objectID": "MiniProject2/MiniProject2Submission.html#approach",
    "href": "MiniProject2/MiniProject2Submission.html#approach",
    "title": "Mini Project 2: Data Aquisition",
    "section": "Approach",
    "text": "Approach\nAll of our data has been accumulated from the Stardew Valley Wiki page. Since each item in the game has a different page and not all of the pages followed a similar structure, we used a combination of harvesting the data in both table form and anywhere on the webpage using rvest with html_text. In the end, we were able to create a dataset from the more important item categories: crops, fish, animal products, and minerals.\n\nCrops\nCrops was the most difficult item to scrape from the wiki, since not all of the pages are structured the same. However, we tried our best to automate where we could.\nWe start be getting a list of all the different crops in the game.\n\n\nCode\n#check that we are allowed to scrape the wiki\nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\")\n\n\n[1] TRUE\n\n\nCode\nsession &lt;- bow(\"https://stardewvalleywiki.com/Stardew_Valley_Wiki\", force = TRUE)\n\n\n\n\nCode\ncrops &lt;- bow(\"https://stardewvalleywiki.com/Crops\", force = TRUE)\n\nresult &lt;- scrape(crops) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\nseasonal_crops &lt;- result[[134]][2] #table of the season crops so we can use that list\n\nseasonal_crops &lt;- seasonal_crops |&gt;\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |&gt;\n  unnest(Crops) |&gt;\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\")) |&gt;\n  distinct(Crops)\n\n\nCreate our helper functions for crops:\n\n\nCode\n# function for getting the price at a given page and css selector\nget_price &lt;- function(page, css_selector) {\n  page |&gt;\n  html_nodes(css_selector) |&gt;\n  html_text()\n}\n\n# function for creating a tibble of base prices, no profession, for a given crop page\ncrop_base_prices &lt;- function(crop, tiller = FALSE) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector &lt;- str_c(\"tr:nth-child(10) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else {\n      selector &lt;- str_c(\"tr:nth-child(10) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\n\nCreate the tibbles for seasonal crops using the helper functions. Note that items 46 (Tea_Leaves), 44(Sweet Gem Berry), 43(Qi_Fruit), 41(Cactus_Fruit), 36(Grape), 4(Coffee_Bean) have issues when using the functions, so we will scrape the data manually without the functions.\n\n\nCode\n# list of all our seasonal crops\nseasonal_crops_list &lt;- pull(seasonal_crops) # list of our crops tibble\n\n# List of crops, excluding those with known issues\nvalid_crops_list &lt;- seasonal_crops_list[-c(46, 44, 43, 41, 36, 4)]\n\n# Base prices without profession\nbase_crop_prices &lt;- valid_crops_list |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_crop_prices &lt;- valid_crops_list |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |&gt;\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller crop prices\nseasonal_crop_prices &lt;- bind_rows(base_crop_prices, tiller_crop_prices)\nseasonal_crop_prices\n\n\n# A tibble: 80 × 6\n   item        regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;               &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Blue_Jazz              50           62         75           100 &lt;NA&gt;      \n 2 Carrot                 35           43         52            70 &lt;NA&gt;      \n 3 Cauliflower           175          218        262           350 &lt;NA&gt;      \n 4 Garlic                 60           75         90           120 &lt;NA&gt;      \n 5 Green_Bean             40           50         60            80 &lt;NA&gt;      \n 6 Kale                  110          137        165           220 &lt;NA&gt;      \n 7 Parsnip                35           43         52            70 &lt;NA&gt;      \n 8 Potato                 80          100        120           160 &lt;NA&gt;      \n 9 Rhubarb               220          275        330           440 &lt;NA&gt;      \n10 Strawberry            120          150        180           240 &lt;NA&gt;      \n# ℹ 70 more rows\n\n\nDo the same for non seasonal crops:\n\n\nCode\n# Non-seasonal crops list, excluding problematic items\nother_crops &lt;- c(\"Apple\", \"Blackberry\", \"Pomegranate\", \"Wild_Plum\", \"Apricot\", \n                 \"Cherry\", \"Spice_Berry\", \"Peach\", \"Orange\", \"Crystal_Fruit\", \n                 \"Banana\", \"Mango\", \"Fiddlehead_Fern\")[-c(10, 7, 4, 2)]\n\n# Base prices without profession\nbase_other_crops &lt;- other_crops |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Tiller profession\ntiller_other_crops &lt;- other_crops |&gt;\n  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |&gt;\n  mutate(profession = \"tiller\")\n\n# Combine base and tiller prices into one table and arrange by item\nnonseasonal_crop_tbl &lt;- bind_rows(base_other_crops, tiller_other_crops) |&gt;\n  arrange(item)\n\n\nFinally, create a function for the weird crops that have missing quality or selector path was different\n\n\nCode\n#function for the crops that do not have different qualities\ncrop_weird_prices &lt;- function(item, selector){\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", item)\n  page &lt;- read_html(url)\n  regular_price &lt;- get_price(page, selector)\n  \n  tibble(item = item,\n      regular_price = parse_number(regular_price))\n}\n\n#function for the crops that have different qualities. the Berry is for the fruits that have a weird selector that seems to follow a similar pattern.\ncrop_weird_prices_w_quality &lt;- function(crop, tiller = FALSE, berry = FALSE ){\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", crop)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (tiller) {\n      selector &lt;- str_c(\"tr:nth-child(11) td+ td tr:nth-child(\", i, \") td+ td\")\n    } else if (berry){\n      selector &lt;- str_c(\"tr:nth-child(9) tr:nth-child(\", i, \") td+ td\")\n    }else {\n      selector &lt;- str_c(\"tr:nth-child(11) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = crop,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\n\nNow we make all of the tibbles for the weird crops.\n\n\nCode\n# Tea Leaves\nbase_tea_leaves &lt;- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) tr td:nth-child(1) td+ td\")\ntiller_tea_leaves &lt;- crop_weird_prices(\"Tea_Leaves\",\n                                     \"tr:nth-child(10) td+ td td+ td\")\n\ntea_leaves &lt;-bind_rows(base_tea_leaves, tiller_tea_leaves)\n\n# Qi_Fruit\nbase_qi_fruit &lt;-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) tr td:nth-child(1) td+ td\")\ntiller_qi_fruit &lt;-crop_weird_prices(\"Qi_Fruit\",\n                                  \"tr:nth-child(9) td+ td td+ td\")\n\nqi_fruit &lt;-bind_rows(base_qi_fruit, tiller_qi_fruit)\n\n# Cactus fruit\ncactus_fruit &lt;- crop_weird_prices_w_quality(\"Cactus_Fruit\")\ncactus_fruit_tiller &lt;- crop_weird_prices_w_quality(\"Cactus_Fruit\", tiller = TRUE)\n\ncactus_fruit &lt;-bind_rows(cactus_fruit, cactus_fruit_tiller)\n\n# Grape\ngrape &lt;- crop_weird_prices_w_quality(\"Grape\")\ngrape_tiller &lt;- crop_weird_prices_w_quality(\"Grape\", tiller = TRUE)\n\ngrape &lt;-bind_rows(grape, grape_tiller)\n\n# Coffee_bean\ncoffee_bean &lt;- crop_weird_prices_w_quality(\"Coffee_Bean\")\n\n# Wild_plum\nwild_plum &lt;- crop_weird_prices_w_quality(\"Wild_Plum\", berry = TRUE)\n\n# Spice_berry\nspice_berry &lt;- crop_weird_prices_w_quality(\"Spice_Berry\", berry = TRUE)\n\n# Crystal_Fruit\ncrystal_fruit &lt;- crop_weird_prices_w_quality(\"Crystal_Fruit\", berry = TRUE)\n\n# Finally, blackberry is just weird and likes to be different, so we did not use a function for it. \n#Blackberry\n\n# Base\nurl &lt;- str_c(\"https://stardewvalleywiki.com/\", \"Blackberry\")\npage &lt;- read_html(url)\n\nqualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\nprices &lt;- list()\n\n# Loop to retrieve and parse prices\nfor (i in seq_along(qualities)) {\n  price &lt;- get_price(page, str_c(\"tr:nth-child(9) tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\"))\n  prices[[qualities[i]]] &lt;- parse_number(price)\n}\n\nblackberry &lt;- tibble(\n  item = \"Blackberry\",\n  regular_price = prices$regular,\n  silver_price = prices$silver,\n  gold_price = prices$gold,\n  iridium_price = prices$iridium\n)\n\n\nNow, we can combine all of the crop tibbles into one:\n\n\nCode\n# First chunks of crops \ndraft_crops &lt;- bind_rows(seasonal_crop_prices,\n                         nonseasonal_crop_tbl,\n                         tea_leaves, \n                         qi_fruit, \n                         cactus_fruit, \n                         grape, \n                         coffee_bean, \n                         wild_plum, \n                         blackberry, \n                         spice_berry, \n                         crystal_fruit) |&gt;\n  arrange(item)\n\n\nLastly, we can add in the category variable and the subcategory variable. to makes things easier, we decided the subcategory would be the crop’s season. Then, we write it to a csv in case the website changes or updates.\n\n\nCode\nseasons &lt;- result[[134]] %&gt;%\n  select(Season = 1, Crops = 2) |&gt;\n  mutate(Crops = strsplit(Crops, \" • \", fixed = TRUE)) |&gt;\n  unnest(Crops) |&gt;\n  mutate(Crops = str_replace_all(Crops, \" \", \"_\"))\n\n\n\n\nCode\ncrop_prices &lt;- draft_crops |&gt;\n  left_join(seasons, join_by(item == Crops))|&gt;\n   mutate(category = \"crop\",\n          sub_category = str_c(Season, \" Crop\"))|&gt;\n  select(-Season)\n\nwrite.csv(crop_prices, \"crop_prices.csv\")\n\nhead(crop_prices, n = 10)\n\n\n# A tibble: 10 × 8\n   item  regular_price silver_price gold_price iridium_price profession category\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 Amar…           150          187        225           300 &lt;NA&gt;       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 &lt;NA&gt;       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 &lt;NA&gt;       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 &lt;NA&gt;       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 &lt;NA&gt;       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 1 more variable: sub_category &lt;chr&gt;\n\n\n\n\nFish\nFish was the second most difficult item to scrape from the wiki, since again not all of the pages are structured the same. However, we were able identify 4 different pages in which we could write functions to automate.\nWe start be getting a list of all the different fish in the game.\n\n\nCode\n# Making sure that this irl is scrapable\nfish &lt;- bow(\"https://stardewvalleywiki.com/Fish\", force = TRUE) \n\n# Scraping table to get a list of all the fish \nresult &lt;- scrape(fish) |&gt;\n  html_nodes(css = \"table\") |&gt;\n  html_table(header = TRUE, fill = TRUE)\n\n# The correct table for the list of fish, and only keeping the names of the fish column\nfishes &lt;- result[[225]][2] \n\n# However, it is formatted very poorly so we need to tidy it up \nfishes &lt;- fishes |&gt;\n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |&gt;\n  unnest(Fish) |&gt;\n  # splitting the string since \" • \" was used to separate all fish\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\")) |&gt; \n  distinct(Fish) |&gt;\n  # this is a fish that is in the data set twice but with different spacing \n  filter(Fish != \"_Super_Cucumber\") \n\n# This is a tibble with the subcategories of the fish and the fish name for joining later\nsubcategory &lt;- result[[225]] |&gt; \n  select(Location = 1, Fish = 2) |&gt; \n  mutate(Fish = strsplit(Fish, \" • \", fixed = TRUE)) |&gt; \n  unnest(Fish) |&gt;\n  mutate(Fish = str_replace_all(Fish, \" \", \"_\"))\n\n\nCreate our helper functions for fish:\n\n\nCode\n# function for getting the price at a given page and css selector\nget_price &lt;- function(page, css_selector) {\n  page |&gt;\n  html_nodes(css_selector) |&gt;\n  html_text()\n}\n\n# function for creating a tibble of prices for a given fish\n\n# this functions output a tibble of our fish \n# and the 4 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices &lt;- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n    gold_price = prices$gold,\n    iridium_price = prices$iridium\n  )\n}\n\n\nAs well as the function for the fish with a different webpage format.\n\n\nCode\n# this functions output a tibble of our fish, \n# and the 2 different prices of the fish dependent on quality\n\n# fish_base_prices takes our fish name, \n# and takes a profession if we specify true or false, \n# as well as the \"nthchild_num\" value for where the price is being store on that website\n\nfish_base_prices2 &lt;- function(fish, fisher = FALSE, angler = FALSE, nthchild_num) {\n  url &lt;- str_c(\"https://stardewvalleywiki.com/\", fish)\n  page &lt;- read_html(url)\n  \n  qualities &lt;- c(\"regular\", \"silver\", \"gold\", \"iridium\")\n  prices &lt;- list()\n  \n  for (i in seq_along(qualities)) {\n    if (fisher) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(2) tr:nth-child(\", i, \") td+ td\")\n    } else if (angler) {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(3) tr:nth-child(\", i, \") td+ td\")\n    } \n    else {\n      selector &lt;- str_c(\"tr:nth-child(\", nthchild_num,\") tr td:nth-child(1) tr:nth-child(\", i, \") td+ td\")\n    }\n    price &lt;- get_price(page, selector)\n    prices[[qualities[i]]] &lt;- parse_number(price)\n  }\n  \n  tibble(\n    item = fish,\n    regular_price = prices$regular,\n    silver_price = prices$silver,\n  )\n}\n\n\nNow, we will load in our fishes lists so for the type of webpage format they have and then apply our function to the fishes to find their prices.\n\n\nCode\nfishes_list &lt;- pull(fishes) # List of our fishes tibble to view, then dividing up the fish by their website format\n\n# Loading in the fish we know that are tr:nth-child(14) in the html (these fishes were found in the Fish QMD when first exploring and getting to know our website)\nfishfor14 &lt;- readRDS(\"fishfor14.RDS\")\nfishfor14\n\n\n [1] \"Mutant_Carp\"      \"Radioactive_Carp\" \"Albacore\"         \"Anchovy\"         \n [5] \"Eel\"              \"Flounder\"         \"Halibut\"          \"Herring\"         \n [9] \"Octopus\"          \"Pufferfish\"       \"Red_Mullet\"       \"Red_Snapper\"     \n[13] \"Sardine\"          \"Sea_Cucumber\"     \"Squid\"            \"Super_Cucumber\"  \n[17] \"Tilapia\"          \"Tuna\"             \"Bream\"            \"Catfish\"         \n[21] \"Chub\"             \"Dorado\"           \"Goby\"             \"Lingcod\"         \n[25] \"Perch\"            \"Pike\"             \"Rainbow_Trout\"    \"Salmon\"          \n[29] \"Shad\"             \"Smallmouth_Bass\"  \"Sunfish\"          \"Tiger_Trout\"     \n[33] \"Walleye\"          \"Bullhead\"         \"Carp\"             \"Largemouth_Bass\" \n[37] \"Midnight_Carp\"    \"Sturgeon\"         \"Woodskip\"         \"Ghostfish\"       \n[41] \"Ice_Pip\"          \"Stonefish\"        \"Sandfish\"         \"Slimejack\"       \n[45] \"Void_Salmon\"      \"Blobfish\"         \"Midnight_Squid\"   \"Spook_Fish\"      \n[49] \"Blue_Discus\"      \"Lionfish\"         \"Stingray\"        \n\n\nCode\n# Loading in the fish we know that are tr:nth-child(15) in the html, same as above\nfishfor15 &lt;- readRDS(\"fishfor15.RDS\")\nfishfor15\n\n\n [1] \"Angler\"             \"Crimsonfish\"        \"Glacierfish\"       \n [4] \"Glacierfish_Jr.\"    \"Legend\"             \"Legend_II\"         \n [7] \"Ms._Angler\"         \"Son_of_Crimsonfish\" \"Lava_Eel\"          \n[10] \"Scorpion_Carp\"     \n\n\nCode\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishfor10 &lt;- readRDS(\"fishfor10.RDS\")\nfishfor10 \n\n\n[1] \"Clam\"   \"Cockle\" \"Mussel\" \"Oyster\"\n\n\nCode\n# Loading in the fish we know that are tr:nth-child(10) in the html, same as above\nfishleft &lt;- readRDS(\"fishleft.RDS\")\nfishleft\n\n\n[1] \"Crab\"       \"Crayfish\"   \"Lobster\"    \"Periwinkle\" \"Shrimp\"    \n[6] \"Snail\"     \n\n\nCode\n# Creating list of tbl's to store prices so that we can bind into one big tibble\nfish_prices &lt;- vector(\"list\", length = 12)\n\n# Base prices without profession for tr:nth-child(14)\nfish_prices[[1]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 14)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[2]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 14)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[3]] &lt;- fishfor14 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 14)) |&gt;\n  mutate(profession = \"angler\")\n\n\n\n\nCode\n# Base prices without profession for tr:nth-child(15)\nfish_prices[[4]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 15)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[5]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 15)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[6]] &lt;- fishfor15 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 15)) |&gt;\n  mutate(profession = \"angler\")\n\n\n\n\nCode\n# Base prices without profession for tr:nth-child(10)\nfish_prices[[7]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, nthchild_num = 10)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[8]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, fisher = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[9]] &lt;- fishfor10 |&gt;\n  purrr::map_dfr(~ fish_base_prices(.x, angler = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"angler\")\n\n\n\n\nCode\n# Base prices without profession for tr:nth-child(10) but only two qualities\nfish_prices[[10]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, nthchild_num = 10)) |&gt;\n  mutate(profession = as.character(NA))\n\n# Prices with Fisher profession\nfish_prices[[11]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, fisher = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"fisher\")\n\n# Prices with Angler profession\nfish_prices[[12]] &lt;- fishleft |&gt;\n  purrr::map_dfr(~ fish_base_prices2(.x, angler = TRUE, nthchild_num = 10)) |&gt;\n  mutate(profession = \"angler\")\n\n\nFinally we will take our fish prices and then create one big tibble.\n\n\nCode\n# first tbl in fish prices assigned to our final tibble \ntidy_fish_prices &lt;- fish_prices[[1]] \n\n# for loop for iterating each tbl in our fish prices list to our final tibble\nfor (i in 2:12){\n  tidy_fish_prices &lt;- bind_rows(tidy_fish_prices, fish_prices[[i]])\n}\n\n# viewing and alphabetizing our tidy fish tbl \n# also joining our subcategories and assigning category\n(tidy_fish_prices &lt;- tidy_fish_prices |&gt;\n  left_join(subcategory, join_by(item == Fish)) |&gt;\n  mutate(category = \"fish\") |&gt;\n  rename(sub_category = Location) |&gt;\n  arrange(item))\n\n\n# A tibble: 318 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Albacore            75           93        112           150 &lt;NA&gt;      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 &lt;NA&gt;      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 8 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 308 more rows\n# ℹ 2 more variables: sub_category &lt;chr&gt;, category &lt;chr&gt;\n\n\nCode\n# writing our tbl as a csv so that we can join with the other items \nwrite.csv(tidy_fish_prices, \"fish_prices.csv\")\nhead(tidy_fish_prices, n = 10)\n\n\n# A tibble: 10 × 8\n   item     regular_price silver_price gold_price iridium_price profession\n   &lt;chr&gt;            &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Albacore            75           93        112           150 &lt;NA&gt;      \n 2 Albacore            93          116        140           187 fisher    \n 3 Albacore           112          139        168           225 angler    \n 4 Anchovy             30           37         45            60 &lt;NA&gt;      \n 5 Anchovy             37           46         56            75 fisher    \n 6 Anchovy             45           55         67            90 angler    \n 7 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 8 Angler             900         1125       1350          1800 &lt;NA&gt;      \n 9 Angler            1125         1406       1687          2250 fisher    \n10 Angler            1125         1406       1687          2250 fisher    \n# ℹ 2 more variables: sub_category &lt;chr&gt;, category &lt;chr&gt;\n\n\n\n\nAnimal Products\nAnimal products was one of the easier items to scrape since we were able to scrape the data from a table.\n\n\nCode\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Animal_Products_Profitability\")\n\n\n[1] TRUE\n\n\nCode\nsession &lt;- bow(\"https://stardewvalleywiki.com/Animal_Products_Profitability\", force = TRUE)\n\n#take the second table, because that is the one we are interested in\nresult_animals &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt; \n  html_table(header = TRUE, fill = TRUE)\n\nsd_animal_prices &lt;- result_animals[[2]]\n\n\nFrom here all we have to do is clean up our tibble.\n\n\nCode\n#clean up the sd_animal_prices tibble\ntidy_sd_animal_price &lt;- sd_animal_prices |&gt;\n  clean_names()|&gt;\n  select(item, \n         profession, \n         quality, \n         sell_price)|&gt; #select only the columns we want\n  group_by(item, profession)|&gt;\n  pivot_wider(names_from = quality, \n              values_from = sell_price, \n              names_glue = \"{quality}_price\",\n              values_fn = mean)|&gt;\n  clean_names()|&gt;\n  mutate(category = \"animal product\",\n         profession = ifelse(profession == \"—\", NA, profession))\n\n#write the final version to a csv\nwrite.csv(tidy_sd_animal_price, \"animal_product_prices.csv\")\nhead(tidy_sd_animal_price, n = 10)\n\n\n# A tibble: 10 × 7\n# Groups:   item, profession [10]\n   item  profession regular_price silver_price gold_price iridium_price category\n   &lt;chr&gt; &lt;chr&gt;              &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;   \n 1 Egg   &lt;NA&gt;                  50           62         75           100 animal …\n 2 Egg   Rancher               60           75         90           120 animal …\n 3 Egg   Artisan               50           62         75           100 animal …\n 4 Larg… &lt;NA&gt;                  95          118        142           190 animal …\n 5 Larg… Rancher              114          142        171           228 animal …\n 6 Larg… Artisan               95          118        142           190 animal …\n 7 Void… &lt;NA&gt;                  65           81         97           130 animal …\n 8 Void… Rancher               78           97        117           156 animal …\n 9 Void… Artisan               65           81         97           130 animal …\n10 Duck… &lt;NA&gt;                  95          118        142           190 animal …\n\n\n\n\nMinerals\nMinerals was one of the easier items to scrape since we were able to scrape the data from a table. However assigning the category and subcategories is what made the process a little more tedious.\n\n\nCode\n#first be polite and check that we can scrape it \nrobotstxt::paths_allowed(\"https://stardewvalleywiki.com/Minerals\")\n\n\n[1] TRUE\n\n\nCode\nsession &lt;- bow(\"https://stardewvalleywiki.com/Minerals\", force = TRUE)\n\nresult_minerals &lt;- scrape(session) |&gt;\n  html_nodes(css = \"table\") |&gt; \n  html_table(header = TRUE, fill = TRUE)\n#interested in tables 1-4\n\n\n\n\nCode\n#This function takes a scraped minerals table and preps it for joining with other datasets\ntidy_minerals &lt;- function(data, sub_cat){\n  data|&gt;\n  clean_names()|&gt;\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = sub_cat)|&gt;\n  rename(regular_sell_price = sell_price)|&gt;\n  pivot_longer(\n    cols = c(gemologist_sell_price,\n             regular_sell_price),\n    names_to = \"profession\",\n    values_to = \"sell_price\"\n  )|&gt;\n  select(item, \n         profession, \n         sell_price,\n         category,\n         sub_category)|&gt;\n  mutate(sell_price = as.numeric(str_extract(sell_price, '(?&lt;=data-sort-value=\")\\\\d+')),\n         profession = ifelse(profession == \"gemologist_sell_price\",\n                             \"gemologist\", NA))\n  \n \n}\n\n#use function for the 1-3 tables using a for loop\nminerals_tbl &lt;- vector(\"list\", length = 4)\nmineral_sub_cat &lt;- c(\"foraged mineral\",\n                     \"gem\",\n                     \"geode mineral\",\n                     \"geode\")\nfor (i in 1:3){\n  minerals_tbl[[i]] &lt;- tidy_minerals(result_minerals[[i]], mineral_sub_cat[i])\n  \n}\n\n#clean up the variable names so that it is ready for the row bind.\n# make sure the category is all mineral, and the sub_category is correct\nminerals_tbl[[4]]&lt;- result_minerals[[4]]|&gt;\n  clean_names()|&gt;\n  mutate(item = name,\n         category = \"mineral\",\n         sub_category = \"geode\",\n         sell_price = as.numeric(str_extract(sell_price, '(?&lt;=data-sort-value=\")\\\\d+')),\n         profession = NA)|&gt;\n  select(item, sell_price, category, sub_category, profession)\n\ntidy_sd_minerals_price &lt;- bind_rows(minerals_tbl)\n\n\nWrite it to a csv in case the website changes or updates.\n\n\nCode\nwrite.csv(tidy_sd_minerals_price, \"minerals_prices.csv\")\nhead(tidy_sd_minerals_price, n = 10)\n\n\n# A tibble: 10 × 5\n   item          profession sell_price category sub_category   \n   &lt;chr&gt;         &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;          \n 1 Quartz        gemologist         32 mineral  foraged mineral\n 2 Quartz        &lt;NA&gt;               25 mineral  foraged mineral\n 3 Earth Crystal gemologist         65 mineral  foraged mineral\n 4 Earth Crystal &lt;NA&gt;               50 mineral  foraged mineral\n 5 Frozen Tear   gemologist         97 mineral  foraged mineral\n 6 Frozen Tear   &lt;NA&gt;               75 mineral  foraged mineral\n 7 Fire Quartz   gemologist        130 mineral  foraged mineral\n 8 Fire Quartz   &lt;NA&gt;              100 mineral  foraged mineral\n 9 Emerald       gemologist        325 mineral  gem            \n10 Emerald       &lt;NA&gt;              250 mineral  gem            \n\n\n\nCombined Dataset\nLastly, we merged together all of the data sets for each of the 4 categories: crops, fish, animal products, and minerals. This dataset is now ready to be used for different item comparisons depending item category.\n\n\nCode\n# binding rows for all of different categories \nstardew_items &lt;- bind_rows(crop_prices, \n                           tidy_sd_animal_price, \n                           tidy_sd_minerals_price,\n                           tidy_fish_prices)\n\nwrite.csv(stardew_items, \"stardew_items.csv\")\n\nhead(stardew_items, n = 10)\n\n\n# A tibble: 10 × 9\n   item  regular_price silver_price gold_price iridium_price profession category\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 Amar…           150          187        225           300 &lt;NA&gt;       crop    \n 2 Amar…           165          205        247           330 tiller     crop    \n 3 Anci…           550          687        825          1100 &lt;NA&gt;       crop    \n 4 Anci…           605          755        907          1210 tiller     crop    \n 5 Apple           100          125        150           200 &lt;NA&gt;       crop    \n 6 Apple           110          137        165           220 tiller     crop    \n 7 Apri…            50           62         75           100 &lt;NA&gt;       crop    \n 8 Apri…            55           68         82           110 tiller     crop    \n 9 Arti…           160          200        240           320 &lt;NA&gt;       crop    \n10 Arti…           176          220        264           352 tiller     crop    \n# ℹ 2 more variables: sub_category &lt;chr&gt;, sell_price &lt;dbl&gt;"
  },
  {
    "objectID": "MiniProject4/MiniProject4.html",
    "href": "MiniProject4/MiniProject4.html",
    "title": "Women in Headlines Text Analysis",
    "section": "",
    "text": "The portrayal of women in media headlines offers valuable insights into societal perceptions and cultural norms in the landscape of gender representation. One area to look at women in media is article headlines, which often shapes public perceptions and influence how women are viewed in various contexts. This study explores important aspects of media coverage about women: the most common topics and themes present in headlines, and how the overall sentiment conveyed by these topics have shifted over time. By analyzing these dimensions, we can identify key trends that reflect women in the media."
  },
  {
    "objectID": "MiniProject4/MiniProject4.html#introduction",
    "href": "MiniProject4/MiniProject4.html#introduction",
    "title": "Women in Headlines Text Analysis",
    "section": "",
    "text": "The portrayal of women in media headlines offers valuable insights into societal perceptions and cultural norms in the landscape of gender representation. One area to look at women in media is article headlines, which often shapes public perceptions and influence how women are viewed in various contexts. This study explores important aspects of media coverage about women: the most common topics and themes present in headlines, and how the overall sentiment conveyed by these topics have shifted over time. By analyzing these dimensions, we can identify key trends that reflect women in the media."
  },
  {
    "objectID": "MiniProject4/MiniProject4.html#methodology",
    "href": "MiniProject4/MiniProject4.html#methodology",
    "title": "Women in Headlines Text Analysis",
    "section": "Methodology",
    "text": "Methodology\nThe dataset being used is a subset of the data found from The Pudding, which compiles a list of headlines tagged with the keywords “women OR woman OR girl OR female OR lady OR ladies OR she OR her OR herself OR aunt OR grandmother OR mother OR sister”. These article headlines were scraped from the top 50 news publications according to similarweb in USA, India, UK and South Africa, from the years 2005 to 2021. To streamline the analysis process, this subset includes only headlines from the 10 most common websites.\n\n\nCode\ntop_10_sites &lt;- headlines |&gt;\n  count(site, sort = TRUE) |&gt;\n  slice_max(n, n = 10)|&gt;\n  pull(site)\n\nfiltered_headlines &lt;- headlines |&gt;\n  filter(site %in% top_10_sites)"
  },
  {
    "objectID": "MiniProject4/MiniProject4.html#approachprocess",
    "href": "MiniProject4/MiniProject4.html#approachprocess",
    "title": "Women in Headlines Text Analysis",
    "section": "Approach/Process",
    "text": "Approach/Process\n\nData Manipulation using str_ functions and regular expressions\nIn order to look at common topics and themes, we are first interested in extracting the headline topic that the articles fall under.\n\n\nCode\nfiltered_headlines2 &lt;- filtered_headlines |&gt;\n  rename(row_ID = `...1`)|&gt;\n  mutate(\n    category = str_remove(url, \"https?://[^/]+/\"),  # Remove protocol and domain\n    category = str_replace(category, \"-\", \"\"), #remove the - that separates a few words\n    category = str_remove(category, \"\\\\d{4}(?:/\\\\d{2}){0,2}\"), #remove those with dates\n    category = str_to_lower(str_extract(category, \"^[^/]+\")), # Extract the first segment of the path\n    word_count = str_count(headline_no_site, \"\\\\S+\"),\n    year = year(time) ) #count the number of words, used for later\n\nkable(filtered_headlines2|&gt;\n  filter(!is.na(category))|&gt; #The ones that are NA do not have a category since they were categorized by date\n  count(category, sort = TRUE)|&gt;\n  slice_head(n=10))\n\n\n\n\n\ncategory\nn\n\n\n\n\nnews\n24620\n\n\nlifestyle\n3943\n\n\nus\n2333\n\n\ncity\n2246\n\n\nwomen\n2240\n\n\nnewyork\n2214\n\n\nblogs\n1842\n\n\nfemail\n1819\n\n\nentertainment\n1770\n\n\nhealth\n1173\n\n\n\n\n\nIn the table above, we can see that some of the most common article topics involving women include news, lifestype, US, city, and women. This is great, but it may also be nice to see the most common theme for each headline. We can do this by finding the most common themes that are associated with the words from the headlines.\n\n\nTidying with Text Analysis\n\n\nCode\ntokened_headlines &lt;- filtered_headlines2 |&gt;\n  unnest_tokens(output = word, input = headline_no_site)|&gt;\n  anti_join(stop_words)\n\nkable(tokened_headlines|&gt;\n  left_join(word_themes)|&gt;\n  filter(!is.na(theme))|&gt;\n  group_by(row_ID, url)|&gt;\n  count(theme, sort = TRUE) |&gt; # Count the frequency of themes per row\n  slice_max(n) |&gt; # Select the most common theme per row\n  ungroup()|&gt;\n  count(theme, sort = TRUE))\n\n\n\n\n\ntheme\nn\n\n\n\n\nNo theme\n33993\n\n\ncrime and violence\n13132\n\n\nfemale stereotypes\n12034\n\n\npeople and places\n11305\n\n\nempowerment\n6473\n\n\nrace, ethnicity and identity\n3129\n\n\n\n\n\nThe table shows that the most common themes related to women in articles is no theme, crime and violence, female stereotypes, and people and places. Since the majority of articles do not fall into a theme, we need a better way to analyze the articles, specifically the trends of the words in the headlines. This leads us to shift our focus to analyzing how the sentiment about women in headlines have changed over time.\n\n\nCode\nbing_sentiments &lt;- get_sentiments(lexicon = \"bing\")\n\ntop_categories &lt;- c(\"news\", \"lifestyle\", \"us\", \n                   \"city\", \"women\")\n\ntokened_headlines|&gt;\n  filter(category %in% top_categories) |&gt;\n  inner_join(bing_sentiments)|&gt;\n  #group_by(row_ID, url)|&gt;\n  count(row_ID, year, category, sentiment) |&gt;\n  pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) |&gt;\n  mutate(sentiment = positive - negative) |&gt;\n  ggplot(aes(x = year, y = sentiment, fill = category)) +\n    geom_col(show.legend = FALSE) +\n    facet_wrap(~category, ncol = 2, scales = \"free_x\") +\n    labs(\n      title = \"Yearly Sentiment on Women in Headlines by Category\",\n      x = \"Year\",\n      y = \"Net Sentiment (Positive - Negative)\"\n    ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nThe graph shows yearly net sentiment trends on women in headlines across the top 5 five categories: city, lifestyle, news, US, and women. Most categories, including “city,” “lifestyle,” “US,” and “women,” show stable sentiment trends that are predominantly neutral to slightly negative over time, with minimal fluctuations. In contrast, the “news” category shows significant negative sentiment, particularly between 2010 and 2020, with a peak of negativity around 2015–2018. This is possibly due to how words that carry negative sentiment tend to be used more often in news headlines.\nWe can look more closely at the most common words in each category using the tf-idf statistic.\n\n\nCode\nheadlines_word_count &lt;- tokened_headlines |&gt;\n  filter(category %in% top_categories) |&gt;\n  #filter(!word %in% c(\"hax\", \"carolyn\", \"british\", \"britain\", \"uk\")) |&gt;\n  anti_join(stop_words) |&gt;\n  count(word,category,sort = TRUE)\n\npotter_tfidf &lt;- headlines_word_count |&gt;\n  bind_tf_idf(word, category, n)\n\npotter_tfidf |&gt;\n  group_by(category) |&gt;\n  arrange(desc(tf_idf)) |&gt;\n  slice_max(tf_idf, n = 10) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = fct_reorder(word, tf_idf), y = tf_idf, fill = category)) +\n    geom_col(show.legend = FALSE) +\n    coord_flip() +\n    facet_wrap(~category, scales = \"free\") +\n  labs(title = \"Top 10 Words per Top Article Categories by tf-idf Statistic\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nThe graph highlights the most distinctive words in article categories based on TF-IDF scores, showcasing the primary focus of each category. The “city” category is dominated by Indian cities like Mumbai and Chennai, which makes sense given the category type. “Lifestyle” features terms such as “fashion,” “study,” and names like “Carolyn” and “Meghan,” which are writers for advice columns. In the “women” category, words such as “feminist,” “midlife,” and “Britain” suggest themes around gender issues and societal roles with a interesting emphasis on the UK. Lastly, The “news” and “US” categories focus on crime, legal events, and prominent figures, with words like “charged,” “Florida,” “Trump,” and “shooting.”\nThis makes sense why the net sentiment is primarily negative across years for the news and us category given that words like “charged” and “shooting” clearly have a negative sentiment associated with it. The top words for the other categories nether have a clear positive or negative sentiment associated with it, which may explain the stable sentiment trends."
  },
  {
    "objectID": "MiniProject4/MiniProject4.html#conclusion",
    "href": "MiniProject4/MiniProject4.html#conclusion",
    "title": "Women in Headlines Text Analysis",
    "section": "Conclusion",
    "text": "Conclusion\nFrom the text analysis of women in headlines, we can conclude that certain categories exhibit stable sentiment trends while others reveal persistent negativity tied to specific themes. These findings shows that generally, women in headlines are most often categorized in topics relating to the news with a overall general negative sentiment throughout the years 2005 to 2021."
  }
]